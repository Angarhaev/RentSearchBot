from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from utils import texts
from my_keyboards import KeyboardsStartCreate, ReplyKeyboardCreate
from states.states import AlSettings
from aiogram.exceptions import TelegramBadRequest
from database import DatabaseCommands


router = Router()


@router.message(StateFilter(None), F.text != '/edit_settings', F.text != "üè†", F.text != "/swipe", CommandStart)
async def start_handler(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π handler —Å –≤–Ω–µ—Å–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤—à–µ–≥–æ —Å—Ç–∞—Ä—Ç"""
    user_keyboard_repeat_start_search = await KeyboardsStartCreate.create_repeat_start_search()
    user_keyboard_start = await KeyboardsStartCreate.create_start_search()
    user_reply_swipe = await ReplyKeyboardCreate.create_keyboard_swipe()
    entry_insert_or_no = await DatabaseCommands.insert_user_start(message.from_user.id, message.from_user.username,
                                                                  message.from_user.full_name)
    if entry_insert_or_no:
        await message.bot.send_sticker(chat_id=message.chat.id,
                                       sticker='CAACAgIAAxkBAAEKz6llYNDvOb2kfDYQrXqb-GF-6jQrlQACTKcAAmOLRgwvLC3Va72R7TME',
                                       reply_markup=user_reply_swipe)
        await message.answer(texts.wellcome_text.format(name=message.from_user.full_name),
                             reply_markup=user_keyboard_start)
    else:
        await message.answer(f'{message.from_user.first_name}, –∂–µ–ª–∞–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã?',
                             reply_markup=user_keyboard_repeat_start_search)
    await state.set_state(AlSettings.start)


@router.callback_query(StateFilter(AlSettings.metro, AlSettings.settings,
                                   AlSettings.update, AlSettings.start), F.data == '/back', CommandStart)
async def start_settings(callback: CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –∫–æ–ª–±—ç–∫–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ back –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–µ–Ω—é –ø—Ä–æ—á–∏—Ö –º–æ–¥—É–ª–µ–π"""
    user_keyboard_start = await KeyboardsStartCreate.create_start_search()
    user_keyboard_repeat_start_search = await KeyboardsStartCreate.create_repeat_start_search()

    entry_insert_or_no = await DatabaseCommands.insert_user_start(callback.from_user.id, callback.message.from_user.username,
                                                                  callback.from_user.full_name)
    if entry_insert_or_no:
        await callback.bot.send_sticker(chat_id=callback.message.chat.id,
                                        sticker='CAACAgIAAxkBAAEKz6llYNDvOb2kfDYQrXqb-GF-6jQrlQACTKcAAmOLRgwvLC3Va72R7TME')
        await callback.message.answer(texts.wellcome_text.format(name=callback.from_user.full_name),
                                      reply_markup=user_keyboard_start)
    else:
        await callback.message.delete()
        settings_check = await DatabaseCommands.select_settings_user(callback.from_user.id)
        if settings_check:
            await callback.message.answer(f'üè†', reply_markup=user_keyboard_repeat_start_search)
        else:
            await callback.message.answer(f'üè†',
                                          reply_markup=user_keyboard_start)
    await state.set_state(AlSettings.start)


@router.message(StateFilter(AlSettings.start), F.text != "üè†", F.text != "/swipe", F.text != '/edit_settings')
async def error_start(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_keyboard_start = await KeyboardsStartCreate.create_start_search()
    user_keyboard_repeat_start_search = await KeyboardsStartCreate.create_repeat_start_search()
    entry_insert_or_no = await DatabaseCommands.insert_user_start(message.from_user.id, message.from_user.username,
                                                                  message.from_user.full_name)
    if entry_insert_or_no:
        await message.bot.send_sticker(chat_id=message.chat.id,
                                       sticker='CAACAgIAAxkBAAEKz7NlYNfpIrodmS_oSyG4xxFIa-34zgACVQADr8ZRGmTn_PAl6RC_MwQ')
        await message.answer(f'{message.from_user.first_name}, –ø–æ—Ä–∞ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä—ã!',
                             reply_markup=user_keyboard_start)

    else:
        await message.answer(f'{message.from_user.first_name}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=user_keyboard_repeat_start_search)

    await state.set_state(AlSettings.start)
